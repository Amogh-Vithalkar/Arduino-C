
0-99_with_2_7-segment_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000149  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f6  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000017d  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ef  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  0000069b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000006c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
//0-99_with_2_7-segment_display
#include<avr/io.h>
#include<util/delay.h>

void main()
{
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	df 93       	push	r29
  8c:	cf 93       	push	r28
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
  92:	64 97       	sbiw	r28, 0x14	; 20
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	de bf       	out	0x3e, r29	; 62
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	cd bf       	out	0x3d, r28	; 61
	int i,j,array[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0xfd,0x07,0x7f,0x6f};
  9e:	de 01       	movw	r26, r28
  a0:	11 96       	adiw	r26, 0x01	; 1
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	84 e1       	ldi	r24, 0x14	; 20
  a8:	01 90       	ld	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	81 50       	subi	r24, 0x01	; 1
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x26>
	DDRB=0xff;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	87 bb       	out	0x17, r24	; 23
	DDRC=0xff;
  b4:	84 bb       	out	0x14, r24	; 20
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(i=0;i<=9;i++)
		{
			for(j=0;j<=9;j++)
			{
			    PORTB=array[i];
  ba:	be 01       	movw	r22, r28
  bc:	6f 5f       	subi	r22, 0xFF	; 255
  be:	7f 4f       	sbci	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	99 e1       	ldi	r25, 0x19	; 25
  c2:	e9 2e       	mov	r14, r25
  c4:	f1 2c       	mov	r15, r1
	DDRC=0xff;
	while(1)
	{
		for(i=0;i<=9;i++)
		{
			for(j=0;j<=9;j++)
  c6:	8e 01       	movw	r16, r28
  c8:	0b 5e       	subi	r16, 0xEB	; 235
  ca:	1f 4f       	sbci	r17, 0xFF	; 255
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <main+0x76>
			{
			    PORTB=array[i];
  ce:	48 bb       	out	0x18, r20	; 24
				PORTC=array[j];
  d0:	80 81       	ld	r24, Z
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	88 e8       	ldi	r24, 0x88	; 136
  d6:	93 e1       	ldi	r25, 0x13	; 19
  d8:	d7 01       	movw	r26, r14
  da:	11 97       	sbiw	r26, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <main+0x56>
  e2:	32 96       	adiw	r30, 0x02	; 2
	DDRC=0xff;
	while(1)
	{
		for(i=0;i<=9;i++)
		{
			for(j=0;j<=9;j++)
  e4:	e0 17       	cp	r30, r16
  e6:	f1 07       	cpc	r31, r17
  e8:	91 f7       	brne	.-28     	; 0xce <main+0x4c>
	int i,j,array[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0xfd,0x07,0x7f,0x6f};
	DDRB=0xff;
	DDRC=0xff;
	while(1)
	{
		for(i=0;i<=9;i++)
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	2a 30       	cpi	r18, 0x0A	; 10
  f0:	31 05       	cpc	r19, r1
  f2:	14 f0       	brlt	.+4      	; 0xf8 <main+0x76>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
		{
			for(j=0;j<=9;j++)
			{
			    PORTB=array[i];
  f8:	f9 01       	movw	r30, r18
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	e6 0f       	add	r30, r22
 100:	f7 1f       	adc	r31, r23
 102:	40 81       	ld	r20, Z
 104:	fb 01       	movw	r30, r22
 106:	e3 cf       	rjmp	.-58     	; 0xce <main+0x4c>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
